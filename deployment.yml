---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-test-deployment
spec:
  replicas: 4  # На основании нагрузочных тестовы выставляем количество реплик равным необходимому количеству подов для работы в пике.
  selector:
    matchLabels:
      app: my-test-app
  strategy:   # Выбран нативный режим деплоя приложений,будет незаметен для пользователей.
    rollingUpdate:
      # выставлено значение 1 для того что бы при обовлении k8s мог создавать pod до того как уничтожиться один из старых pod-ов.
      maxSurge: 1
      # Выставлено значение 0 так как для работоспособности в пиковую нагрузку необходимы все доступные pod-ы из данного deploymet в сочетании с значением maxSurge новые pod-ы будут приходить на место старых не изменяя общее число ready pods
      maxUnavailable: 0
    type: RollingUpdate 
  template:
    metadata:
      labels:
        app: my-test-app
    spec:
      containers:
        - image: nginx:1.13 # Образ выбран для примера на основнии того что импользуем web приложение,
          name: nginx       # конечно же всегда можем использовать заранее собраный образ из registry
          ports:
            - containerPort: 80
          readinessProbe:       #  Проверяем готово ли приложение принимать запросы.
            failureThreshold: 3 #  Количество провалов выставлено до 3х.
            httpGet:            
              path: /           
              port: 80
            periodSeconds: 10
            successThreshold: 1 #  Будет выполняться до первой успешной проверки.
            timeoutSeconds: 10  #  На основаннии вводной информации о том что приложению необходимо 5-10 секунд для загрузки выставлен timeout до 10 секунд.
          livenessProbe:        #  Проверяйм доступность приложения в время его работы.
            failureThreshold: 3 
            httpGet:            #  Позволяет k8s контролировать приложение в время работы и пытаться "чинить" приложение перезапуском если приложение 3 раза подряд не пройдет проверку
              path: /
              port: 80
            periodSeconds: 10   #  Проверка запускаеться каждые 10 секунд
            successThreshold: 1
            timeoutSeconds: 1
            initialDelaySeconds: 15 #  Откладываем запуск на 15 секунд от readinessProbe
          resources:                #  иначе livenessProbe и readinessProbe стартанут однавременно.
            requests:
              cpu: 100m             #  На основании вводной информации о ресурсопотреблении приложения выставляем значения в 100m что равно 0.1 CPU и 128Mi ОЗУ
              memory: 128Mi
            limits:                 #  Лимиты выставлены немного выше для обеспечения старта приложения и непредвиденных нагрузок в дальнейшем.
              cpu: 300m
              memory: 130Mi